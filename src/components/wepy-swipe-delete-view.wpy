<style lang="less">
  .swipe-item {
    position: relative;
  }
  .swipe-content {
    position: relative;
    z-index: 10;
  }
  .swipe-menu {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-color: #dfdfdf;
  }
  .swipe-menu-right-content {
    height: 100%;
    display: flex;
    float: right;
  }
  .swipe-menu-left-content{
    height:100%;
    display:flex;
    float:left;
  }
  .swipe-menu-delete {
    padding: 0 40rpx;
    height: 100%;
    background-color: rgb(255, 58, 50);
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .swipe-menu-edit {
    padding: 0 40rpx;
    height: 100%;
    background-color: rgb(200, 199, 205);
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .swipe-menu-add {
    padding: 0 40rpx;
    height: 100%;
    background-color: rgb(70, 165, 63);
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .swipe-menu-mark {
    padding: 0 40rpx;
    height: 100%;
    background-color: orange;
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .swipe-menu-text {
    color: #FFF;
  }
</style>
<template>
  <scroll-view style='height:{{scrollHeight}}px;' scroll-y='{{scrollY}}'>
    <view wx:for="{{msgList}}" wx:key="id" class="swipe-item" animation='{{item.wrapAnimation}}'>
      <view id="{{item['swipe-delete-id']}}"
            class='swipe-content'
            animation='{{item.animation}}'
            @touchstart="ontouchstart"
            @touchmove="ontouchmove"
            @touchend="ontouchend">
        <slot></slot>
      </view>
      <view class='swipe-menu'>
        <view class="swipe-menu-right-content">
          <view class='swipe-menu-edit'
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{editButton.backgroundColor}}; display: {{editButton.show ? 'flex':'none'}};"
                @tap.stop='onEditButtonTap'
                @longpress='onEditButtonLongtap'>
            <view class="swipe-menu-text">{{editButton.text}}</view>
          </view>
          <view class='swipe-menu-delete'
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{deleteButton.backgroundColor}}; display: {{deleteButton.show ? 'flex':'none'}};"
                @tap.stop='onDeleteButtonTap'
                @longpress='onDeleteButtonLongtap'>
            <view class="swipe-menu-text">{{deleteButton.text}}</view>
          </view>
        </view>
        <view class="swipe-menu-left-content">
          <view class="swipe-menu-add swipe-menu-text"
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{addButton.backgroundColor}}; display: {{addButton.show ? 'flex':'none'}};"
                @tap.stop='onAddButtonTap'
                @longpress='onAddButtonLongtap'>{{addButton.text}}</view>
          <view class="swipe-menu-mark swipe-menu-text"
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{markButton.backgroundColor}}; display: {{markButton.show ? 'flex':'none'}};"
                @tap.stop='onMarkButtonTap'
                @longpress='onMarkButtonLongtap'>{{markButton.text}}</view>
        </view>
      </view>
    </view>
  </scroll-view>
</template>
<script>
  import wepy from 'wepy';

  export default class SwipeDeleteView extends wepy.component {
    props = {
      deleteButton: {
        type: Object,
        default: {
          text: '删除',
          backgroundColor: '#ff3a32',
          show: true
        }
      },
      editButton: {
        type: Object,
        default: {
          text: '编辑',
          backgroundColor: '#c8c7cd',
          show: true
        }
      },
      addButton: {
        type: Object,
        default: {
          text: '添加',
          backgroundColor: '#46a53f',
          show: true
        }
      },
      markButton: {
        type: Object,
        default: {
          text: '标记',
          backgroundColor: '#FFA500',
          show: true
        }
      },
      scrollHeight: {
        type: Number,
        default: 0
      },
      list: {
        type: Object,
        default: []
      }
    };
    data = {
      msgList: [],
      height: 0,
      scrollY: true,
      swipeCheckX: 35, // 激活检测滑动的阈值
      swipeCheckState: 0, // 0未激活 1激活
      maxMoveLeft: 0, // 消息列表项最大左滑距离+menu的宽度
      maxMoveRight: 0, // 消息列表项最大右滑距离+menu的宽度
      correctMoveLeft: 0, // 显示右边菜单的总宽度
      correctMoveRight: 0, // 显示右边菜单的总宽度
      thresholdMoveLeft: 0.2, // 左滑阈值，超过则显示菜单(30%)
      lastShowMsgId: '', // 记录上次显示菜单的消息id
      moveX: 0,  // 记录平移距离
      showState: 0, // 0 未显示菜单 1显示菜单
      touchStartState: 0, // 开始触摸时的状态 0 未显示菜单 1 显示菜单
      swipeDirection: 0, // 是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动
      currentPosition: {
        swipeId: 'swipe-delete-id-0',
        position: 0
      }
    };
    onLoad() {
      this.internalInit();
    }
    /**
     * 内部初始化
     */
    internalInit() {
      let that = this;
      let systemInfo = wepy.getSystemInfoSync();
      // scroll的高度为0时，我们为屏幕的高度
      if (this.scrollHeight <= 0) {
        that.scrollHeight = systemInfo.windowHeight;
      }
      that.msgList = that.list;
      // 为每个数据项添加一个id，后面通过这个id来操控UI
      for (let i = 0; i < this.msgList.length; i++) {
        let itemData = this.msgList[i];
        // 判断当前list（原始数据）中的每一项是否存在id这个字段，如果没有就自动加上
        // 如果不加上id这个字段数据列表就会错乱，目前不知道什么原因引起的
        if (!itemData.id) {
          itemData.id = i;
        }
        itemData['swipe-delete-id'] = 'swipe-delete-id-' + i;
      }
      that.$apply();
      // 根据右边menu的宽度计算item最大左滑的距离，
      wx.createSelectorQuery().select('.swipe-menu-edit').boundingClientRect(function (rect) {
        if (rect) {
          that.correctMoveRight += rect.width;
        }
      }).exec();
      wx.createSelectorQuery().select('.swipe-menu-delete').boundingClientRect(function (rect) {
        if (rect) {
          that.correctMoveRight += rect.width;
        }
        // 最大左滑距离是menu总长度的+10像素,如果左边的menu总长度为0，即都不显示按钮则不可以左滑
        if (that.correctMoveRight <= 0) {
          that.maxMoveLeft = 0;
        } else {
          that.maxMoveLeft = that.correctMoveRight + 10;
        }
      }).exec();
      // 根据右边menu的宽度计算item最大左滑的距离，
      wx.createSelectorQuery().select('.swipe-menu-add').boundingClientRect(function (rect) {
        if (rect) {
          that.correctMoveLeft += rect.width;
        }
      }).exec();
      wx.createSelectorQuery().select('.swipe-menu-mark').boundingClientRect(function (rect) {
        if (rect) {
          that.correctMoveLeft += rect.width;
        }
        // 最大右滑距离是menu总长度的+10像素,如果左边的menu总长度为0，即都不显示按钮则不可以左滑
        if (that.correctMoveLeft <= 0) {
          that.maxMoveRight = 0;
        } else {
          that.maxMoveRight = that.correctMoveLeft + 10;
        }
      }).exec();
    }

    /**
     * 更新组件（外部调用）
     */
    update() {
      this.internalInit();
    }
    methods = {
      ontouchstart: function (e) {
        if (this.showState === 1) {
          this.touchStartState = 1;
          this.showState = 0;
          this.moveX = 0;
          this.translateXMsgItem(this.lastShowMsgId, 0, 200);
          this.lastShowMsgId = '';
          return;
        }
        this.firstTouchX = e.touches[0].clientX;
        this.firstTouchY = e.touches[0].clientY;
        if (this.firstTouchX > this.swipeCheckX) {
          this.swipeCheckState = 1;
        }
      },
      ontouchmove: function (e) {
        if (this.swipeCheckState === 0) {
          return;
        }
        // 当开始触摸时有菜单显示时，不处理滑动操作
        if (this.touchStartState === 1) {
          return;
        }
        let moveX = e.touches[0].clientX - this.firstTouchX;
        let moveY = e.touches[0].clientY - this.firstTouchY;
        // 已触发垂直滑动，由scroll-view处理滑动操作
        if (this.swipeDirection === 2) {
          return;
        }
        // 未触发滑动方向
        if (this.swipeDirection === 0) {
          // 触发垂直操作
          if (Math.abs(moveY) > 4) {
            this.swipeDirection = 2;
            return;
          }
          // 触发水平操作
          if (Math.abs(moveX) > 4) {
            this.swipeDirection = 1;
          } else {
            return;
          }
        }
        // 判断当前的item滑动方向，如果moveX >0 这想有滑动，反正向左滑动
        if (moveX < 0) {
          // 检测最大左滑距离
          if (moveX < -this.maxMoveLeft) {
            moveX = -this.maxMoveLeft;
          }
        } else {
          if (moveX > this.maxMoveRight) {
            moveX = this.maxMoveRight;
          }
        }
        this.scrollY = false;
        // 如果上一次和本次位置为发送变化就不执行平移
        if (this.moveX === moveX) {
          return;
        }
        this.moveX = moveX;
        this.translateXMsgItem(e.currentTarget.id, this.moveX, 0);
      },
      ontouchend: function (e) {
        this.swipeCheckState = 0;
        let swipeDirection = this.swipeDirection;
        this.swipeDirection = 0;
        if (this.touchStartState === 1) {
          this.touchStartState = 0;
          return;
        }
        // 垂直滚动，忽略
        if (swipeDirection !== 1) {
          return;
        }
        if (this.moveX === 0) {
          this.showState = 0;
          // 不显示菜单状态下,激活垂直滚动
          return;
        }
        if (this.moveX === this.correctMoveRight) {
          this.showState = 1;
          this.lastShowMsgId = e.currentTarget.id;
          return;
        }

        // 判断当前的item滑动方向，如果moveX >0 这想有滑动，反正向左滑动
        if (this.moveX < 0) {
          if (this.moveX < -(this.maxMoveLeft * this.thresholdMoveLeft)) {
            this.moveX = -this.correctMoveRight;
            this.showState = 1;
            this.lastShowMsgId = e.currentTarget.id;
          } else {
            this.moveX = 0;
            this.showState = 0;
          }
        } else {
          if (this.moveX > (this.maxMoveRight * this.thresholdMoveLeft)) {
            this.moveX = this.correctMoveLeft;
            this.showState = 1;
            this.lastShowMsgId = e.currentTarget.id;
          } else {
            this.moveX = 0;
            this.showState = 0;
          }
        }
        this.scrollY = true;
        this.translateXMsgItem(e.currentTarget.id, this.moveX, 200);
      },
      onDeleteButtonTap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('deleteTap', this, this.msgList[positon]);
      },
      onDeleteButtonLongtap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('deleteLongTap', this, this.msgList[positon]);
      },
      onEditButtonTap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('editTap', this, this.msgList[positon]);
      },
      onEditButtonLongtap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('editLongTap', this, this.msgList[positon]);
      },
      onAddButtonTap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('addTap', this, this.msgList[positon]);
      },
      onAddButtonLongtap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('addLongTap', this, this.msgList[positon]);
      },
      onMarkButtonTap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('markTap', this, this.msgList[positon]);
      },
      onMarkButtonLongtap: function (e) {
        let swipeId = e.currentTarget.id;
        let positon = this.getItemIndex(swipeId);
        this.$emit('markLongTap', this, this.msgList[positon]);
      }
    };

    deleteMsgItem(swipeId) {
      let animation = wx.createAnimation({duration: 200});
      animation.height(0).opacity(0).step();
      this.animationMsgWrapItem(swipeId, animation);
      let that = this;
      setTimeout(function () {
        let index = that.getItemIndex(swipeId);
        that.msgList.splice(index, 1);
        that.$apply();
      }, 200);
      this.showState = 0;
    }

    /**
     * 获取当前id在list中的位置
     * @param swipeId
     * @return number
     */
    getItemIndex(swipeId) {
      let msgList = this.msgList;
      for (let i = 0; i < msgList.length; i++) {
        if (msgList[i]['swipe-delete-id'] === swipeId) {
          return i;
        }
      }
      return -1;
    }
    /**
     * 删除item,外部调用(实际是对item 隐藏并不会删除原始数据)
     */
    deleteItem() {
      if (this.lastShowMsgId) {
        this.deleteMsgItem(this.lastShowMsgId);
      }
    }

    /**
     * 关闭item,外部调用(
     */
    closeItem() {
      if (this.lastShowMsgId) {
        this.translateXMsgItem(this.lastShowMsgId, 0, 200);
        this.showState = 0;
        this.$apply();
      }
    }

    /**
     * 设置Item向左平移，实现滑动效果
     * @param swipeId
     * @param x
     * @param duration
     */
    translateXMsgItem(swipeId, x, duration) {
      let animation = wx.createAnimation({duration: duration});
      animation.translateX(x).step();
      this.animationMsgItem(swipeId, animation);
    };
    /**
     * 设置Item左滑的动画
     * @param swipeId
     * @param animation
     */
    animationMsgItem(swipeId, animation) {
      let index = 0;
      if (this.currentPosition.swipeId === swipeId) {
        index = this.currentPosition.position;
      } else {
        index = this.getItemIndex(swipeId);
        this.currentPosition = {
          swipeId: swipeId,
          position: index
        };
      }
      this.msgList[index].animation = animation.export();
    };

    /**
     * 设置Item被删除时动画
     * @param swipeId
     * @param animation
     */
    animationMsgWrapItem(swipeId, animation) {
      let index = this.getItemIndex(swipeId);
      this.msgList[index].wrapAnimation = animation.export();
    };
  }
</script>
