<style lang="less">
  .swipe-item {
    position: relative;
  }
  .swipe-content {
    width: 100%;
    position: relative;
    z-index: 10;
  }
  .swipe-menu {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    background-color: #dfdfdf;
  }
  .swipe-menu-content {
    height: 100%;
    display: flex;
    float: right;
  }
  .swipe-menu-delete {
    padding: 0 40rpx;
    height: 100%;
    background-color: rgb(255, 58, 50);
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .swipe-menu-text {
    color: #FFF;
  }
  .swipe-menu-edit {
    padding: 0 40rpx;
    height: 100%;
    background-color: rgb(200, 199, 205);
    display: flex;
    align-items: center; // 配个display:flex;实现垂直居中，
    justify-content: center; // 配个display:flex;实现水平居中
  }
  .display {
    display: none !important;
  }
</style>
<template>
  <scroll-view style='height:600px;' scroll-y='{{scrollY}}'>
    <view wx:for="{{msgList}}" wx:key="id" class="swipe-item" animation='{{item.wrapAnimation}}'>
      <view id="{{item['swipe-delete-id']}}"
            class='swipe-content'
            animation='{{item.animation}}'
            @touchstart="ontouchstart"
            @touchmove="ontouchmove"
            @touchend="ontouchend">
        <slot></slot>
      </view>
      <view class='swipe-menu'>
        <view class="swipe-menu-content">
          <view class='swipe-menu-edit'
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{editOptions.backgroundColor}}; display: {{editOptions.show ? 'flex':'none'}};"
                @tap.stop='onEditMsgTap'
                @longpress='onEditMsgLongtap'>
            <view class="swipe-menu-text">{{editOptions.text}}</view>
          </view>
          <view class='swipe-menu-delete'
                id="{{item['swipe-delete-id']}}"
                style="background-color: {{deleteOptions.backgroundColor}}; display: {{deleteOptions.show ? 'flex':'none'}};"
                @tap.stop='onDeleteMsgTap'
                @longpress='onDeleteMsgLongtap'>
            <view class="swipe-menu-text">{{deleteOptions.text}}</view>
          </view>
        </view>
      </view>
    </view>
  </scroll-view>
</template>
<script>
  import wepy from 'wepy'

  export default class SwipeDeletePageMode extends wepy.component {
    props = {
      deleteOptions: {
        type: Object,
        default: {
          text: '删除',
          backgroundColor: '#ff3a32',
          show: true
        }
      },
      editOptions: {
        type: Object,
        default: {
          text: '编辑',
          backgroundColor: '#c8c7cd',
          show: true
        }
      },
      position: {
        default: 0
      },
      swipeData: {
        type: Object,
        default: []
      }
    }
    data = {
      msgList: [],
      height: 0,
      scrollY: true,
      swipeCheckX: 35, // 激活检测滑动的阈值
      swipeCheckState: 0, // 0未激活 1激活
      maxMoveLeft: 0, // 消息列表项最大左滑距离+menu的宽度
      correctMoveLeft: 20, // 显示菜单时的左滑距离
      thresholdMoveLeft: 0.2, // 左滑阈值，超过则显示菜单(30%)
      lastShowMsgId: '', // 记录上次显示菜单的消息id
      moveX: 0,  // 记录平移距离
      showState: 0, // 0 未显示菜单 1显示菜单
      touchStartState: 0, // 开始触摸时的状态 0 未显示菜单 1 显示菜单
      swipeDirection: 0, // 是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动
      currentPosition: {
        swipeId: 'swipe-delete-id-0',
        position: 0
      }
    }

    onLoad() {
      this.msgList = this.swipeData
      for (let i = 0; i < this.msgList.length; i++) {
        this.msgList[i]['swipe-delete-id'] = 'swipe-delete-id-' + i
      }
      let that = this
      that.$apply()
      // 根据menu的宽度计算item最大左滑的距离，
      wx.createSelectorQuery().select('.swipe-menu-edit').boundingClientRect(function (rect) {
        that.correctMoveLeft += rect.width
      }).exec()
      wx.createSelectorQuery().select('.swipe-menu-delete').boundingClientRect(function (rect) {
        that.correctMoveLeft += rect.width
        // 最大左滑距离是menu总长度的+10像素
        that.maxMoveLeft = that.correctMoveLeft + 10
      }).exec()
    }

    methods = {
      ontouchstart: function (e) {
        if (this.showState === 1) {
          this.touchStartState = 1
          this.showState = 0
          this.moveX = 0
          this.translateXMsgItem(this.lastShowMsgId, 0, 200)
          this.lastShowMsgId = ''
          return
        }
        this.firstTouchX = e.touches[0].clientX
        this.firstTouchY = e.touches[0].clientY
        if (this.firstTouchX > this.swipeCheckX) {
          this.swipeCheckState = 1
        }
        this.lastMoveTime = e.timeStamp
      },
      ontouchmove: function (e) {
        if (this.swipeCheckState === 0) {
          return
        }
        // 当开始触摸时有菜单显示时，不处理滑动操作
        if (this.touchStartState === 1) {
          return
        }
        let moveX = e.touches[0].clientX - this.firstTouchX
        let moveY = e.touches[0].clientY - this.firstTouchY
        // 已触发垂直滑动，由scroll-view处理滑动操作
        if (this.swipeDirection === 2) {
          return
        }
        // 未触发滑动方向
        if (this.swipeDirection === 0) {
          // 触发垂直操作
          if (Math.abs(moveY) > 4) {
            this.swipeDirection = 2
            return
          }
          // 触发水平操作
          if (Math.abs(moveX) > 4) {
            this.swipeDirection = 1
          } else {
            return
          }
        }
        // 禁用垂直滚动
        if (this.data.scrollY) {
        }

        this.lastMoveTime = e.timeStamp
        // 处理边界情况
        if (moveX > 0) {
          moveX = 0
        }
        // 检测最大左滑距离
        if (moveX < -this.maxMoveLeft) {
          moveX = -this.maxMoveLeft
        }
        this.moveX = moveX
        this.translateXMsgItem(e.currentTarget.id, moveX, 0)
      },
      ontouchend: function (e) {
        this.swipeCheckState = 0
        let swipeDirection = this.swipeDirection
        this.swipeDirection = 0
        if (this.touchStartState === 1) {
          this.touchStartState = 0
          return
        }
        // 垂直滚动，忽略
        if (swipeDirection !== 1) {
          return
        }
        if (this.moveX === 0) {
          this.showState = 0
          // 不显示菜单状态下,激活垂直滚动
          return
        }
        if (this.moveX === this.correctMoveLeft) {
          this.showState = 1
          this.lastShowMsgId = e.currentTarget.id
          return
        }
        if (this.moveX < -(this.maxMoveLeft * this.thresholdMoveLeft)) {
          this.moveX = -this.correctMoveLeft
          this.showState = 1
          this.lastShowMsgId = e.currentTarget.id
        } else {
          this.moveX = 0
          this.showState = 0
          // 不显示菜单,激活垂直滚动
        }
        this.translateXMsgItem(e.currentTarget.id, this.moveX, 200)
      },
      onDeleteMsgTap: function (e) {
        let swipeId = e.currentTarget.id
        let positon = this.getItemIndex(swipeId)
        this.$emit('deleteTap', this, this.msgList[positon])
      },
      onDeleteMsgLongtap: function (e) {
        let swipeId = e.currentTarget.id
        let positon = this.getItemIndex(swipeId)
        this.$emit('deleteLongTap', this, this.msgList[positon])
      },
      onEditMsgTap: function (e) {
        let swipeId = e.currentTarget.id
        let positon = this.getItemIndex(swipeId)
        this.$emit('editTap', this, this.msgList[positon])
      },
      onEditMsgLongtap: function (e) {
        let swipeId = e.currentTarget.id
        let positon = this.getItemIndex(swipeId)
        this.$emit('editLongTap', this, this.msgList[positon])
      }
    }

    deleteMsgItem(swipeId) {
      let animation = wx.createAnimation({duration: 200})
      animation.height(0).opacity(0).step()
      this.animationMsgWrapItem(swipeId, animation)
      let that = this
      setTimeout(function () {
        let index = that.getItemIndex(swipeId)
        that.msgList.splice(index, 1)
        that.$apply()
      }, 200)
      this.showState = 0
    }

    /**
     * 获取当前id在list中的位置
     * @param swipeId
     * @return number
     */
    getItemIndex(swipeId) {
      let msgList = this.msgList
      for (let i = 0; i < msgList.length; i++) {
        if (msgList[i]['swipe-delete-id'] === swipeId) {
          return i
        }
      }
      return -1
    }
    /**
     * 删除item,外部调用(实际是对item 隐藏并不会删除原始数据)
     */
    deleteItem() {
      if (this.lastShowMsgId) {
        this.deleteMsgItem(this.lastShowMsgId)
      }
    }

    /**
     * 关闭item,外部调用(
     */
    closeItem() {
      if (this.lastShowMsgId) {
        this.translateXMsgItem(this.lastShowMsgId, 0, 200)
        this.showState = 0
        this.$apply()
      }
    }

    /**
     * 设置Item向左平移，实现滑动效果
     * @param id
     * @param x
     * @param duration
     */
    translateXMsgItem(swipeId, x, duration) {
      let animation = wx.createAnimation({duration: duration})
      animation.translateX(x).step()
      this.animationMsgItem(swipeId, animation)
    };
    /**
     * 设置Item左滑的动画
     * @param id
     * @param animation
     */
    animationMsgItem(swipeId, animation) {
      let index = 0
      if (this.currentPosition.swipeId === swipeId) {
        index = this.currentPosition.position
      } else {
        index = this.getItemIndex(swipeId)
        this.currentPosition = {
          swipeId: swipeId,
          position: index
        }
      }
      this.msgList[index].animation = animation.export()
    };

    /**
     * 设置Item被删除时动画
     * @param swipeId
     * @param animation
     */
    animationMsgWrapItem(swipeId, animation) {
      let index = this.getItemIndex(swipeId)
      this.msgList[index].wrapAnimation = animation.export()
    };
  }
</script>
