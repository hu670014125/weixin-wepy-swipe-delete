<style lang="less">
  page {
    background: #f0f0f5;
    border-top: 1rpx #dfdfdf solid;
  }

  .msg-list {
  }

  .msg-item {
    width: 100%;
    height: 150rpx;
    border-bottom: 1rpx solid rgb(233, 233, 233);
    position: relative;
    left: 0;
    top: 0;
    overflow: hidden;
  }

  .msg {
    position: absolute;
    width: 100%;
    height: 150rpx;
    left: 0;
    top: 0;
    z-index: 100;
    background-color: #FFF;
  }

  .header-img {
    position: absolute;
    width: 110rpx;
    height: 110rpx;
    left: 20rpx;
    top: 20rpx;
    border-radius: 10%;
  }

  .user-name {
    position: absolute;
    left: 150rpx;
    top: 20rpx;
  }

  .msg-text {
    position: absolute;
    left: 150rpx;
    bottom: 20rpx;
    font-size: 80%;
    color: rgb(127, 127, 127);
  }

  .msg-menu {
    position: absolute;
    width: 100%;
    height: 150rpx;
    left: 0;
    top: 0;
    z-index: 0;
  }

  .menu-delete {
    position: absolute;
    width: 150rpx;
    height: 148rpx;
    top: 1rpx;
    right: 0;
    background-color: rgb(255, 58, 50);
    color: #FFF;
    text-align: center;
    line-height: 150rpx;
  }

  .menu-mark {
    position: absolute;
    width: 200rpx;
    height: 148rpx;
    top: 1rpx;
    right: 150rpx;
    background-color: rgb(200, 199, 205);
    color: #FFF;
    text-align: center;
    line-height: 150rpx;
  }
</style>
<template>
  <scroll-view style='height:{{height}}px;' scroll-y='{{scrollY}}' class='msg-list'>
    <view wx:for="{{msgList}}" wx:key="id" class='msg-item' animation='{{item.wrapAnimation}}'>
      <view id='{{item.id}}' class='msg' animation='{{item.animation}}' @touchstart="ontouchstart"
            @touchmove="ontouchmove" @touchend="ontouchend">
        <image class='header-img' src="{{item.headerImg}}"></image>
        <text class='user-name'>{{item.userName}}</text>
        <text class='msg-text'>{{item.msgText}}</text>
      </view>
      <view class='msg-menu'>
        <view id='{{item.id}}' class='menu-delete' @tap='onDeleteMsgTap' @longpress='onDeleteMsgLongtap'>
          删除
        </view>
        <view id='{{item.id}}' class='menu-mark' @tap='onMarkMsgTap' @longpres='onMarkMsgLongtap'>
          标记未读
        </view>
      </view>
    </view>
  </scroll-view>
</template>
<script>
  import wepy from 'wepy';

  export default class SwipeDeletePageMode extends wepy.page {
    config = {
      navigationBarTitleText: '页面page模式'
    };
    props = {
      swipeData: {
        type: Object,
        default: []
      }
    };
    data = {
      msgList: [],
      height: 0,
      scrollY: true,
      swipeCheckX: 35, // 激活检测滑动的阈值
      swipeCheckState: 0, // 0未激活 1激活
      maxMoveLeft: 180, // 消息列表项最大左滑距离
      correctMoveLeft: 175, // 显示菜单时的左滑距离
      thresholdMoveLeft: 0.2, // 左滑阈值，超过则显示菜单（20%）
      lastShowMsgId: '', // 记录上次显示菜单的消息id
      moveX: 0,  // 记录平移距离
      showState: 0, // 0 未显示菜单 1显示菜单
      touchStartState: 0, // 开始触摸时的状态 0 未显示菜单 1 显示菜单
      swipeDirection: 0 // 是否触发水平滑动 0:未触发 1:触发水平滑动 2:触发垂直滑动
    };

    onLoad(options) {
      let systemInfo = wepy.getSystemInfoSync();
      console.log(systemInfo);
      this.pixelRatio = systemInfo.pixelRatio;
      let windowHeight = systemInfo.windowHeight;
      this.height = windowHeight;
      for (let i = 0; i < 50; i++) {
        let msg = {};
        msg.userName = '' + '用户' + (i + 1);
        msg.msgText = '您有新的消息';
        msg.id = 'id-' + (i + 1);
        msg.headerImg = options.avatarUrl;
        this.data.msgList.push(msg);
      }
      console.log(this.data.msgList);
      this.$apply();
    }

    methods = {
      ontouchstart: function (e) {
        if (this.showState === 1) {
          this.touchStartState = 1;
          this.showState = 0;
          this.moveX = 0;
          this.translateXMsgItem(this.lastShowMsgId, 0, 200);
          this.lastShowMsgId = '';
          return;
        }
        this.firstTouchX = e.touches[0].clientX;
        this.firstTouchY = e.touches[0].clientY;
        if (this.firstTouchX > this.swipeCheckX) {
          this.swipeCheckState = 1;
        }
        this.lastMoveTime = e.timeStamp;
      },

      ontouchmove: function (e) {
        if (this.swipeCheckState === 0) {
          return;
        }
        // 当开始触摸时有菜单显示时，不处理滑动操作
        if (this.touchStartState === 1) {
          return;
        }
        let moveX = e.touches[0].clientX - this.firstTouchX;
        let moveY = e.touches[0].clientY - this.firstTouchY;
        // 已触发垂直滑动，由scroll-view处理滑动操作
        if (this.swipeDirection === 2) {
          return;
        }
        // 未触发滑动方向
        if (this.swipeDirection === 0) {
          console.log(Math.abs(moveY));
          // 触发垂直操作
          if (Math.abs(moveY) > 4) {
            this.swipeDirection = 2;

            return;
          }
          // 触发水平操作
          if (Math.abs(moveX) > 4) {
            this.swipeDirection = 1;
            this.setData({scrollY: false});
          } else {
            return;
          }
        }
        // 禁用垂直滚动
        if (this.data.scrollY) {
          this.setData({scrollY: false});
        }

        this.lastMoveTime = e.timeStamp;
        // 处理边界情况
        if (moveX > 0) {
          moveX = 0;
        }
        // 检测最大左滑距离
        if (moveX < -this.maxMoveLeft) {
          moveX = -this.maxMoveLeft;
        }
        this.moveX = moveX;
        this.translateXMsgItem(e.currentTarget.id, moveX, 0);
      },
      ontouchend: function (e) {
        this.swipeCheckState = 0;
        let swipeDirection = this.swipeDirection;
        this.swipeDirection = 0;
        if (this.touchStartState === 1) {
          this.touchStartState = 0;
          this.setData({scrollY: true});
          return;
        }
        // 垂直滚动，忽略
        if (swipeDirection !== 1) {
          return;
        }
        if (this.moveX === 0) {
          this.showState = 0;
          // 不显示菜单状态下,激活垂直滚动
          this.setData({scrollY: true});
          return;
        }
        if (this.moveX === this.correctMoveLeft) {
          this.showState = 1;
          this.lastShowMsgId = e.currentTarget.id;
          return;
        }
        console.log((this.maxMoveLeft * this.thresholdMoveLeft));
        if (this.moveX < -(this.maxMoveLeft * this.thresholdMoveLeft)) {
          this.moveX = -this.correctMoveLeft;
          this.showState = 1;
          this.lastShowMsgId = e.currentTarget.id;
        } else {
          this.moveX = 0;
          this.showState = 0;
          // 不显示菜单,激活垂直滚动
          this.setData({scrollY: true});
        }
        this.translateXMsgItem(e.currentTarget.id, this.moveX, 200);
        // this.translateXMsgItem(e.currentTarget.id, 0, 0);
      },
      onDeleteMsgTap: function (e) {
        console.log('删除点击--------->');
        console.log(e);
        this.deleteMsgItem(e);
      },
      onDeleteMsgLongtap: function (e) {
        console.log('删除长按--------->');
        console.log(e);
      },
      onMarkMsgTap: function (e) {
        console.log('MarkMsgTap--------->');
        console.log(e);
      },
      onMarkMsgLongtap: function (e) {
        console.log('MarkMsgLongtap--------->');
        console.log(e);
      }
    };

    deleteMsgItem(e) {
      let animation = wx.createAnimation({duration: 200});
      animation.height(0).opacity(0).step();
      this.animationMsgWrapItem(e.currentTarget.id, animation);
      let s = this;
      setTimeout(function () {
        let index = s.getItemIndex(e.currentTarget.id);
        s.data.msgList.splice(index, 1);
        s.setData({msgList: s.data.msgList});
      }, 200);
      this.showState = 0;
      this.setData({scrollY: true});
    }

    /**
     * 获取当前id在list中的位置
     * @param id
     * @return position
     */
    getItemIndex(id) {
      let msgList = this.data.msgList;
      for (let i = 0; i < msgList.length; i++) {
        if (msgList[i].id === id) {
          return i;
        }
      }
      return -1;
    }

    /**
     * 设置Item向左平移，实现滑动效果
     * @param id
     * @param x
     * @param duration
     */
    translateXMsgItem(id, x, duration) {
      let animation = wx.createAnimation({duration: duration});
      animation.translateX(x).step();
      this.animationMsgItem(id, animation);
    };

    /**
     * 设置Item左滑的动画
     * @param id
     * @param animation
     */
    animationMsgItem(id, animation) {
      let index = this.getItemIndex(id);
      this.msgList[index].animation = animation.export();
      this.$apply();
    };

    /**
     * 设置Item被删除时动画
     * @param id
     * @param animation
     */
    animationMsgWrapItem(id, animation) {
      let index = this.getItemIndex(id);
      this.msgList[index].wrapAnimation = animation.export();
    };
  }
</script>
